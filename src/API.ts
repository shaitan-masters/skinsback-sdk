import axios, {AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';
import {SignatureApiBuilder} from './SignatureGenerator'
import {API_URL} from "./defaultConfig";
import {
    API_METHODS,
    GameTypes,
    ApiConfig,
    CreateOrderResponse,
    OrderStatusResponse,
    OrdersStatusResponse,
    ServerStatusResponse,
    CallbackErrorListResponse,
    PriceListResponse,
    FindItemsResponse, BuyItemResponse, BoughtItemResponse, BoughtItemsHistoryResponse
} from "./types";
import Trace from "./Trace";

class API {
    private static axios: AxiosInstance;
    private readonly config: ApiConfig;
    private axios: AxiosInstance;
    private trace: Trace | null;

    constructor(apiConfig: ApiConfig) {
        this.config = apiConfig;
        this.axios = axios.create({
            baseURL: this.config.apiUrl || API_URL,
        })
        this.trace = null;
        if (this.config.enableLogs) {
            this.trace = new Trace({
                logsPath: this.config.logsPath,
                excludeMethods: this.config.excludeMethods,
                amountOfLastDaysOfSavingLogs: this.config.amountOfLastDaysOfSavingLogs
            });
        }

        API.interceptorsInit.call(this, this.config, this.trace);
    }

    private static interceptorsInit (apiConfig: ApiConfig, trace: Trace | null) {
        this.axios.interceptors.request.use((config: AxiosRequestConfig) => {
            // Adding shop_id field to requests body and
            // adding sign field generated by SignatureBuilder service
            const data = {
                ...config.data,
                shopid: apiConfig.shop_id,
            }
            data.sign = SignatureApiBuilder(data, apiConfig.secret_key)
            config.data = data
            // Return modified config with shop_id and signature
            return config;
        },error => {
            // Write response data with error to logs
            trace && trace.logError(error);
            return Promise.reject(error)
        });

        // Response interceptor
        this.axios.interceptors.response.use((response: AxiosResponse) => {
            // When received error, response has status 200? but it has status field in response body with error
            // or fail status. Interceptor checks status in response body and call reject if
            // status fail or error and write Promise value as response body
            if (response.data.status === 'error' || response.data.status === 'fail') {
                // Write response data with error to logs
                trace && trace.logResponseError(response);
                return Promise.reject(response);
            }
            // Write response data with data to logs
            trace && trace.logResponse(response)
            return response.data;
        },error => {
            // Write response data with error to logs
            trace && trace.logError(error);
            return Promise.reject(error)
        });
    }

    public getBalance = () => {
        return this.axios.post('', {method: API_METHODS.BALANCE})
    }

    public getCurrencies = () => {
        return this.axios.post('', {method: API_METHODS.GET_CURRENCIES})
    }

    public getOrders = ({
        starting,
        ending
    }: {starting: number, ending: number}): Promise<OrdersStatusResponse> => {
        return this.axios.post('', {starting, ending, method: API_METHODS.GET_ORDERS})
    }

    public getOrderStatusByTransactionId = (transaction_id: number | string): Promise<OrderStatusResponse> => {
        return this.axios.post('', {transaction_id, method: API_METHODS.GET_ORDER_STATUS})
    }

    public getOrderStatusByOrderId = (order_id: number): Promise<OrderStatusResponse> => {
        return this.axios.post('', {order_id, method: API_METHODS.GET_ORDER_STATUS})
    }

    public createOrder = (order_id: number): Promise<CreateOrderResponse> => {
        return this.axios.post('', {order_id, method: API_METHODS.CREATE_ORDER})
    }

    public serverStatus = (): Promise<ServerStatusResponse> => {
        return this.axios.post('', {method: API_METHODS.GET_SERVER_STATUS})
    }

    public getErrorCallbackList = (): Promise<CallbackErrorListResponse> => {
        return this.axios.post('', {method: API_METHODS.GET_ERROR_CALLBACK_ERROR_LIST})
    }

    public getMarketPriceList = (game: GameTypes = 'csgo'): Promise<PriceListResponse> => {
        return this.axios.post('', {game, method: API_METHODS.GET_MARKET_PRICE_LIST})
    }

    public findItemsByName = (name: string, game: GameTypes = 'csgo'): Promise<FindItemsResponse> => {
        return this.axios.post('', {name, game, method: API_METHODS.SEARCH_ITEMS})
    }

    public buyItemByNameAndSendToUser = (
        data: {partner: string, token: string, max_price: number, name: string, game: GameTypes}
    ): Promise<BuyItemResponse> => {
        return this.axios.post('', {...data, method: API_METHODS.BUY_ITEM_AND_SEND})
    }

    public buyItemByIdAndSendToUser = (
        data: {partner: string, token: string, max_price: number, id: number | string}
    ): Promise<BuyItemResponse> => {
        return this.axios.post('', {...data, method: API_METHODS.BUY_ITEM_AND_SEND})
    }

    public getInfoAboutBoughtItem = (buy_id: string | number): Promise<BoughtItemResponse> => {
        return this.axios.post('', {buy_id, method: API_METHODS.GET_INFO_ABOUT_BOUGHT_ITEM})
    }

    public getBoughtItemsHistory = ({
        starting,
        ending
    }: {starting: number, ending: number}): Promise<BoughtItemsHistoryResponse> => {
        return this.axios.post('', {starting, ending, method: API_METHODS.GET_INFO_ABOUT_BOUGHT_ITEM})
    }

}

export default API;